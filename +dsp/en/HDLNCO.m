classdef HDLNCO< handle
%HDLNCO    Generate real or complex sinusoidal signals
%   HNCO = dsp.HDLNCO returns a numerically controlled oscillator (NCO) System
%   object, HNCO, that generates a real or complex sinusoidal signal. 
%   The amplitude of the generated signal is always 1.
%
%   HNCO = dsp.HDLNCO('PropertyName', PropertyValue, ...) returns an HDLNCO
%   System object, HNCO, with each specified property set to the specified
%   value.
%
%   HNCO = dsp.HDLNCO(Inc,Name,Value) creates an HDLNCO System object, HNCO, with
%   the PhaseIncrement property set to Inc, and other specified property
%   Names set to the specified Values.
%
%   Step method syntax:
%
%   [Y,validOut] = step(HNCO, Inc,validIn) returns a sinusoidal signal, Y,
%   generated by the HDLNCO, with the specified phase increment, INC.  INC
%   is added to the accumulator when validIn is high. validOut indicates the
%   validity of output signal. INC must be a built-in integer or a fi
%   object scalar. validIn/validOut are scalars with data type logical.
%
%   [Y,validOut] = step(HNCO,validIn) returns a sinusoidal signal, Y, when the
%   PhaseIncrementSource and PhaseOffsetSource properties are both
%   'Property'.
%
%   [Y,validOut] = step(HNCO, Offset,validIn) returns a sinusoidal signal, Y, with phase
%   offset, OFFSET, when the PhaseOffsetSource property is 'Input port'.
%   OFFSET must be a built-in integer or a fi object scalar.
%
%   [Y,validOut] = step(HNCO, Inc, Offset,validIn) returns a sinusoidal signal, Y, with phase
%   increment, Inc, and phase offset, Offset, when the PhaseIncrementSource
%   and the PhaseOffsetSource properties are both 'Input port'.
%   
%   [Y,validIn] = step(HNCO, Dither,validIn) returns a sinusoidal signal, Y, generated by the
%   HDLNCO, with the dither, Dither, when the DitherSource property is
%   'Input port'. DITHER must be a built-in integer or a fi object scalar.
%
%   [Y,validOut] = step(HNCO, INC, OFFSET,DITHER,validIn) returns a sinusoidal signal, Y, with
%   phase increment, Inc, phase offset, Offset, and dither, Dither, when
%   the PhaseIncrementSource, the PhaseOffsetSource , and the DitherSource
%   properties are all 'Input port'.
%    
%   [Y, PHASE,validOut] = step(HNCO, ...) returns a sinusoidal signal, Y, and output
%   Phase, when the PhasePort property is true.
%
%   HDLNCO methods:
%
%   step     - Perform NCO computation (see above)
%   release  - Allow property value and input characteristics changes
%   clone    - Create HDLNCO object with same property values
%   isLocked - Locked status (logical)
%
%   HDLNCO properties:
%
%   PhaseIncrementSource             - Source of phase increment
%   PhaseIncrement                   - Phase increment
%   PhaseOffsetSource                - Source of phase offset
%   PhaseOffset                      - Phase offset
%   DitherSource                     - Source of dither
%   NumDitherBits                    - Number of dither bits
%   PhaseQuantization                - Enables quantization of accumulated
%                                      phase
%   NumQuantizerAccumulatorBits      - Number of quantizer accumulator bits
%   LUTCompress                      - Enable a look up table compression method
%   Waveform                         - Type of output signal
%   PhasePort                        - Enables output of phase port 
%   ResetAction                      - Enable reset input port
%
%   OverflowAction                   - Overflow mode 
%   RoundingMethod                   - Rounding mode         
%   AccumulatorDataType              - Accumulator Data Type 
%   AccumulatorSigned                - Sign of Accumulator 
%   AccumulatorWL                    - Word length of Accumulator 
%   AccumulatorFL                    - Fraction length of Accumulator 
%   OutputDataType                   - Output Data Type 
%   OutputSigned                     - Sign of  Output 
%   OutputWL                         - Word length of  Output
%   OutputFL                         - Fraction length of Output
%
% Example
%  % Design an NCO source according to given specifications.
%       F0 = 510;     % Output frequency = 510 Hz
%       df = 0.05;    % Frequency resolution = 0.05 Hz
%       minSFDR = 96; % Spurious free dynamic range >= 96 dB
%       Ts = 1/4000;  % Sample period = 1/4000 sec
%       dphi = pi/2;  % Desired phase offset = pi/2;
% 
%       % Calculate number of accumulator bits required for the given
%       % frequency resolution
%       Nacc = ceil(log2(1/(df*Ts)));
%       % Calculate number of quantized accumulator bits required from the
%       % SFDR requirement
%       Nqacc = ceil((minSFDR-12)/6);
%       % Calculate the phase increment
%       phIncr = round(F0*Ts*2^Nacc);
%       % Calculate the phase offset
%       phOffset = 2^Nacc*dphi/(2*pi);
% 
%       hnco = dsp.HDLNCO('PhaseIncrementSource', 'Property', ...
%           'PhaseIncrement', phIncr,...
%           'PhaseOffset', phOffset,...
%           'NumDitherBits', 4, ...
%           'NumQuantizerAccumulatorBits', Nqacc,...
%           'AccumulatorWL',Nacc);
%       
%       y = fi(zeros(1,1/Ts),1,16,14);      
%       for k= 1:1/Ts
%        y(k) = step(hnco,true); 
%       end
%       % Plot the mean-square spectrum of the 510 Hz sine wave generated by
%       % the NCO
%       periodogram(double(y),hann(length(y),'periodic'),[],1/Ts,'power');
%
%   See also dsp.NCO.

 
%   Copyright 2012-2013 The MathWorks, Inc.

    methods
        function out=HDLNCO
            %HDLNCO    Generate real or complex sinusoidal signals
            %   HNCO = dsp.HDLNCO returns a numerically controlled oscillator (NCO) System
            %   object, HNCO, that generates a real or complex sinusoidal signal. 
            %   The amplitude of the generated signal is always 1.
            %
            %   HNCO = dsp.HDLNCO('PropertyName', PropertyValue, ...) returns an HDLNCO
            %   System object, HNCO, with each specified property set to the specified
            %   value.
            %
            %   HNCO = dsp.HDLNCO(Inc,Name,Value) creates an HDLNCO System object, HNCO, with
            %   the PhaseIncrement property set to Inc, and other specified property
            %   Names set to the specified Values.
            %
            %   Step method syntax:
            %
            %   [Y,validOut] = step(HNCO, Inc,validIn) returns a sinusoidal signal, Y,
            %   generated by the HDLNCO, with the specified phase increment, INC.  INC
            %   is added to the accumulator when validIn is high. validOut indicates the
            %   validity of output signal. INC must be a built-in integer or a fi
            %   object scalar. validIn/validOut are scalars with data type logical.
            %
            %   [Y,validOut] = step(HNCO,validIn) returns a sinusoidal signal, Y, when the
            %   PhaseIncrementSource and PhaseOffsetSource properties are both
            %   'Property'.
            %
            %   [Y,validOut] = step(HNCO, Offset,validIn) returns a sinusoidal signal, Y, with phase
            %   offset, OFFSET, when the PhaseOffsetSource property is 'Input port'.
            %   OFFSET must be a built-in integer or a fi object scalar.
            %
            %   [Y,validOut] = step(HNCO, Inc, Offset,validIn) returns a sinusoidal signal, Y, with phase
            %   increment, Inc, and phase offset, Offset, when the PhaseIncrementSource
            %   and the PhaseOffsetSource properties are both 'Input port'.
            %   
            %   [Y,validIn] = step(HNCO, Dither,validIn) returns a sinusoidal signal, Y, generated by the
            %   HDLNCO, with the dither, Dither, when the DitherSource property is
            %   'Input port'. DITHER must be a built-in integer or a fi object scalar.
            %
            %   [Y,validOut] = step(HNCO, INC, OFFSET,DITHER,validIn) returns a sinusoidal signal, Y, with
            %   phase increment, Inc, phase offset, Offset, and dither, Dither, when
            %   the PhaseIncrementSource, the PhaseOffsetSource , and the DitherSource
            %   properties are all 'Input port'.
            %    
            %   [Y, PHASE,validOut] = step(HNCO, ...) returns a sinusoidal signal, Y, and output
            %   Phase, when the PhasePort property is true.
            %
            %   HDLNCO methods:
            %
            %   step     - Perform NCO computation (see above)
            %   release  - Allow property value and input characteristics changes
            %   clone    - Create HDLNCO object with same property values
            %   isLocked - Locked status (logical)
            %
            %   HDLNCO properties:
            %
            %   PhaseIncrementSource             - Source of phase increment
            %   PhaseIncrement                   - Phase increment
            %   PhaseOffsetSource                - Source of phase offset
            %   PhaseOffset                      - Phase offset
            %   DitherSource                     - Source of dither
            %   NumDitherBits                    - Number of dither bits
            %   PhaseQuantization                - Enables quantization of accumulated
            %                                      phase
            %   NumQuantizerAccumulatorBits      - Number of quantizer accumulator bits
            %   LUTCompress                      - Enable a look up table compression method
            %   Waveform                         - Type of output signal
            %   PhasePort                        - Enables output of phase port 
            %   ResetAction                      - Enable reset input port
            %
            %   OverflowAction                   - Overflow mode 
            %   RoundingMethod                   - Rounding mode         
            %   AccumulatorDataType              - Accumulator Data Type 
            %   AccumulatorSigned                - Sign of Accumulator 
            %   AccumulatorWL                    - Word length of Accumulator 
            %   AccumulatorFL                    - Fraction length of Accumulator 
            %   OutputDataType                   - Output Data Type 
            %   OutputSigned                     - Sign of  Output 
            %   OutputWL                         - Word length of  Output
            %   OutputFL                         - Fraction length of Output
            %
            % Example
            %  % Design an NCO source according to given specifications.
            %       F0 = 510;     % Output frequency = 510 Hz
            %       df = 0.05;    % Frequency resolution = 0.05 Hz
            %       minSFDR = 96; % Spurious free dynamic range >= 96 dB
            %       Ts = 1/4000;  % Sample period = 1/4000 sec
            %       dphi = pi/2;  % Desired phase offset = pi/2;
            % 
            %       % Calculate number of accumulator bits required for the given
            %       % frequency resolution
            %       Nacc = ceil(log2(1/(df*Ts)));
            %       % Calculate number of quantized accumulator bits required from the
            %       % SFDR requirement
            %       Nqacc = ceil((minSFDR-12)/6);
            %       % Calculate the phase increment
            %       phIncr = round(F0*Ts*2^Nacc);
            %       % Calculate the phase offset
            %       phOffset = 2^Nacc*dphi/(2*pi);
            % 
            %       hnco = dsp.HDLNCO('PhaseIncrementSource', 'Property', ...
            %           'PhaseIncrement', phIncr,...
            %           'PhaseOffset', phOffset,...
            %           'NumDitherBits', 4, ...
            %           'NumQuantizerAccumulatorBits', Nqacc,...
            %           'AccumulatorWL',Nacc);
            %       
            %       y = fi(zeros(1,1/Ts),1,16,14);      
            %       for k= 1:1/Ts
            %        y(k) = step(hnco,true); 
            %       end
            %       % Plot the mean-square spectrum of the 510 Hz sine wave generated by
            %       % the NCO
            %       periodogram(double(y),hann(length(y),'periodic'),[],1/Ts,'power');
            %
            %   See also dsp.NCO.
        end

        function getHeaderImpl(in) %#ok<MANU>
            %getHeaderImpl   Return header for object display
        end

        function getIconImpl(in) %#ok<MANU>
        end

        function getInputNamesImpl(in) %#ok<MANU>
        end

        function getNumInputsImpl(in) %#ok<MANU>
        end

        function getNumOutputsImpl(in) %#ok<MANU>
        end

        function getOutputNamesImpl(in) %#ok<MANU>
        end

        function getPortsIdx(in) %#ok<MANU>
        end

        function getPropertyGroupsImpl(in) %#ok<MANU>
            %getPropertyGroupsImpl   Return property groups for object display
        end

        function isInactivePropertyImpl(in) %#ok<MANU>
        end

        function isInputComplexityLockedImpl(in) %#ok<MANU>
        end

        function isInputSizeLockedImpl(in) %#ok<MANU>
        end

        function isOutputComplexityLockedImpl(in) %#ok<MANU>
        end

        function loadObjectImpl(in) %#ok<MANU>
        end

        function ncocore(in) %#ok<MANU>
        end

        function pngen(in) %#ok<MANU>
            % Poly = [19 18 17 14 0]
            %inistate = [ zeros(1,18) 1];
        end

        function resetImpl(in) %#ok<MANU>
            % resetImpl
            % since the states have already been appropriately sized by
            % setupImpl, we just need to initialize them
        end

        function saveObjectImpl(in) %#ok<MANU>
            % Save the public properties
        end

        function setDiscreteStateImpl(in) %#ok<MANU>
            % setDiscreteStateImpl
            % Set discrete states from input structure
            %set(obj, ds);
        end

        function setupImpl(in) %#ok<MANU>
        end

        function stepImpl(in) %#ok<MANU>
            % connectInputs
        end

        function validateInputsImpl(in) %#ok<MANU>
            % get input and output mode
        end

        function validatePropertiesImpl(in) %#ok<MANU>
        end

    end
    methods (Abstract)
    end
    properties
        %AccumulatorDataType Data Type
        % Accumulator word- and fraction-length designations
        %   This is a constant property with value 'Binary point scaling'.
        AccumulatorDataType;

        % AccumulatorFL Fraction length 
        AccumulatorFL;

        % AccumulatorSigned Signed
        AccumulatorSigned;

        % AccumulatorWL Word length 
        AccumulatorWL;

        %DitherSource Dither source
        %   Indicate how to specify the dither as one of [ 'Property'
        %   | {'Input port'} | 'None' ].
        DitherSource;

        %LUTCompress Enable look up table compression method
        %   Set this property to true to enable look up table compression
        %   method. The default value of this property is false.
        LUTCompress;

        %NumDitherBits Number of dither bits
        %   Specify the number of dither bits as a positive integer. This
        %   property is applicable when the Dither property is true. The
        %   default value of this property is 4.
        NumDitherBits;

        %NumQuantizerAccumulatorBits Number of quantizer accumulator bits
        %   Specify the number of quantizer accumulator bits as an integer
        %   scalar greater than 1 and less than the accumulator word length.
        %   This property determines the number of entries in the lookup table
        %   of sine values. This property is applicable when the
        %   PhaseQuantization property is true. The default value of this
        %   property is 12.
        NumQuantizerAccumulatorBits;

        %OutputDataType Data Type
        % Specify the data type of the output signal as one of [ 'double' |
        % 'single' | {'Binary point scaling'} ].
        OutputDataType;

        % OutputFL Fraction length 
        OutputFL;

        % OutputSigned Signed
        OutputSigned;

        % OutputWL Word length 
        OutputWL;

        %OverflowAction Overflow mode
        % Overflow action for fixed-point operations
        %   This is a constant property with value 'Wrap'.
        OverflowAction;

        %PhaseIncrement Phase increment
        %   Specify the phase increment as an integer scalar. This property is
        %   applicable when the PhaseIncrementSource property is 'Property'.
        %   The default value of this property is 100.
        PhaseIncrement;

        %PhaseIncrementSource Phase increment source
        %   Indicate how to specify the phase increment as one of [ 'Property'
        %   | {'Input port'} ].
        PhaseIncrementSource;

        %PhaseOffset Phase offset
        %   Specify the phase offset as an integer scalar. This property is
        %   applicable when the PhaseOffsetSource property is 'Property'. The
        %   default value of this property is 0.
        PhaseOffset;

        %PhaseOffsetSource Phase offset source
        %   Indicate how to specify the phase offset as one of [{'Property'} |
        %   'Input port' ].
        PhaseOffsetSource;

        %PhasePort Show phase port 
        % set this property to true to show the phase port. The default value of
        % this property is false. 
        PhasePort;

        %PhaseQuantization Quantize phase
        % Enables quantization of accumulated phase
        % Set this property to true to enable quantization of the accumulated
        % phase. The default value of this property is true.
        PhaseQuantization;

        %ResetAction Enable reset input port
        % set this property to true to enable the reset input port. The default value of
        % this property is false.
        ResetAction;

        %RoundingMethod Rounding Mode
        %Rounding method for fixed-point operations
        %   This is a constant property with value 'Floor'.
        RoundingMethod;

        %Waveform Type of output signal
        %   Specify the type of the output signal as one of [{'Sine'} |
        %   'Cosine' | 'Complex exponential' | 'Sine and cosine'].
        Waveform;

        acc;

        cosReg;

        delay;

        phaseReg;

        pn_reg;

        sineReg;

        validReg;

    end
end
