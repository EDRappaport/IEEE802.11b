%CFIRPM  複素数かつ非線形位相の等リップル FIR フィルタ設計
%
%  CFIRPM は、複素数になる可能性のある FIR フィルタ設計に対して、設定
%  される任意の周波数領域の制約を設定できます。等リップル FIR フィルタ
%  設計を行なうのに、チェビシェフ (または、ミニマックス) フィルタ誤差を
%  最適化します。
%
%  B = CFIRPM(N,F,A,W) は、ミニマックスの方向に F と A で記述された目的の
%  周波数応答に最適近似する長さ N+1 の FIR フィルタを返します。
%
%  ここで、
%  N は、フィルタの次数です。
%  F は -1 と +1 の間で単調増加する周波数帯域エッジのベクトルです。ここで 
%    1 はナイキスト周波数です。周波数帯域は、k が奇数の場合 F(k) から 
%    F(k+1) の領域で、k が偶数の場合の F(k+1) から F(k+2) の区間は、
%    最適化の間の "遷移帯域" または "don't care" 領域です。
%  A は、結果のフィルタ B の希望する周波数応答の振幅を表わす実数ベクトルで、
%    F と同じサイズでなければなりません。目的の応答は、k が奇数の場合に、 
%    F(k),A(k)) と (F(k+1),A(k+1)) の点で線形に結合されます。
%  W は最適化の間に使用される、帯域に 1 つの正の重みで実数のベクトルです。
%    W はオプションで、指定されない場合、1 に設定されます。
%
%  Fs/2 で 0 以外のゲインをもつフィルタ、たとえば、ハイパス、バンドストップ
%  フィルタは、N が偶数でなければなりません。それ以外の場合は、N は 1 増加
%  します。
%
%  B = CFIRPM(N,F,@fresp,W) は、関数 @fresp によって返される目的の周波数
%  応答に最適近似する長さ N+1 の FIR フィルタを返します。つぎのシンタックス
%  を使って、関数 CFIRPM から呼び出されます。
%                    [DH,DW] = fresp(N,F,GF,W);
%  ここで、
%  N, F, W は上記に定義しています。
%  GF は、CFIRPM によって設定された各周波数帯域上で線形に補間されたグリッド点
%    のベクトルで、応答関数を評価しなければならない周波数グリッドを決定します。
%  DH と DW は、グリッド GF 内の各周波数で評価される、希望する複素周波数応答と
%    最適化の重みベクトルです。
%
%  B = CFIRPM(N,F,{@fresp,P1,P2,...},W) は、オプション引数 P1,P2... を
%  応答関数 @fresp に渡します。
%
%  以下の関数 @fresp に対して、周波数応答関数を前もって定義できます。
%       'lowpass'  'bandpass' 'multiband'      'hilbfilt'   'allpass'
%       'highpass' 'bandstop' 'differentiator' 'invsinc'
%  さらに情報を得るためには、PRIVATE/LOWPASS などのヘルプを参照してください。
%
%  B = CFIRPM(N,F,{@multiband,A},W) は、B = CFIRPM(N,F,A,W) と等価です。
%
%  B = CFIRPM(..., SYM) は、設計のインパルス応答に対称性を制約として課します。
%  ここで、SYM は、つぎの文字列を設定することができます。
%          'none' - これは、任意の負の帯域エッジ周波数を通過させる場合か、
%                   あるいは、@fresp がデフォルト値を与えない場合の
%                   デフォルト値です。
%          'even' - 実数かつ偶数のインパルス応答です。これは、ハイパス、
%                   ローパスバンドパス、バンドストップ、および、マルチ
%                   バンド設計の場合のデフォルト値です。
%          'odd'  - 実数かつ奇数のインパルス応答です。これは、ヒルベルト
%                   変換子および微分器設計の場合のデフォルト値です。
%                   DC でのゲインは 0 でなければなりません。
%          'real' - 周波数応答に対する共役対称です。
%
%  各周波数応答関数 @fresp は、SYM に対するデフォルト値を与えます; 
%  より詳しい情報については、private/lowpass 等のヘルプを参照してください。
%  'none' 以外の任意の SYM オプションを設定した場合、帯域エッジは正の
%  周波数上にのみ設定します。すなわち、負の周波数領域は対称性により得られます。
%
%  任意のユーザ定義の @fresp 関数は、フィルタの次数を N として文字列 
%  'defaults' に渡した場合に正しい SYM 文字列を返します。
%
%  B = CFIRPM(..., 'skip_stage2') は、CFIRPM が標準の Remez 誤差交換に
%  よって最適解が求められなかったと判定した場合にのみ、実行される第 2 段
%  最適化アルゴリズムを無効にします。このアルゴリズムを無効にすると計算
%  速度が向上する場合がありますが、精度が低下する可能性もあります。
%  デフォルトでは、第 2 段最適化は有効です。
%
%  B = CFIRPM(..., DEBUG) は、フィルタ設計過程の結果の表示を行ないます。
%  ここで、DEBUG は、'trace', 'plots', 'both', 'off' のいずれか 1 つを
%  設定することができます。デフォルトでは、'off' に設定されます。
%
%  B = CFIRPM(...,{LGRID}) では、{LGRID} は、一つの整数からなる 1 行 1 列
%  のセル配列で、周波数グリッドの間隔をコントロールします。この間隔は、
%  おおまかに、2^nextpow2(L-GRID*N) 点をもちます。LGRID のデフォルト値は 
%  25 です。
%
%  SYM, DEBUG, 'skip_stage2', {LGRID} オプションの任意の組合せが指定
%  される可能性があることに注意してください。
%
%  [B,ERR] = CFIRPM(...) は、最大リップルの高さ ERR を返します。
%
%  [B,ERR,RES] = CFIRPM(...) は、CFIRPM が計算したオプション結果の構造体 
%  RES を返します。以下のフィールドが含まれています。
%
%     RES.fgrid:フィルタ設計の最適化に使用する周波数グリッドを含むベクトル
%       RES.des:fgrid の各点に対する希望する周波数応答
%        RES.wt:fgrid の中の各点に対する重み
%         RES.H:グリッド内の各点に対する実際の周波数応答
%     RES.error:周波数グリッド上の各点における誤差
%     RES.iextr:余分な周波数の fgrid のインデックスベクトル
%     RES.fextr:余分な周波数のベクトル
%
%  例 #1:
%    % 31 タップの複素数ローパスフィルタの設計
%    b = cfirpm(30,[-1 -.5 -.4 .7 .8 1],@lowpass);
%    fvtool(b); % フィルタの応答を表示
%
%  例 #2:
%     % 逆 sinc のパスバンド応答をもつ実数のローパスフィルタ
%     [b,del,res] = cfirpm(64,[0 0.3 0.4 1],{@invsinc,3},[1,1],'even');
%     fvtool(b);
%
%  例 #3:
%     % 31 タップの複素数マルチバンドフィルタの設計
%     b = cfirpm(30,[-1 -.5 -.4 .7 .8 1],{@multiband,[0 0 1 2 0 0]});
%     fvtool(b);
%
%  参考 FIRPM, FIR1, FIRLS, FILTER,  PRIVATE/LOWPASS, PRIVATE/HIGHPASS, 
%       PRIVATE/BANDPASS, PRIVATE/BANDSTOP, PRIVATE/MULTIBAND,  PRIVATE/INVSINC, 
%       PRIVATE/HILBFILT, PRIVATE/DIFFERENTIATOR.


%   Copyright 1988-2007 The MathWorks, Inc.
