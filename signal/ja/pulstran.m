%PULSTRAN  パルス列発生器
%
%   PULSTRAN は、連続関数またはサンプリングされたプロトタイプパルスから
%   パルス列を生成します。
%
%   連続関数
%   Y = PULSTRAN(T,D,'func') は、連続関数 'func' のサンプルに基づいて
%   パルス列を生成します。関数は、ベクトル D で定義したスカラ引数オフセット
%   を取り除いた後、配列 T に設定された引数の範囲全体について計算します。
%   この結果、関数は length(D) 回計算し、その結果の和 
%   Y = func(t-D(1)) + func(t-D(2))+ ... 
%   が返されます。'func' は、配列 T を引数として受け取ることができる
%   ベクトル関数でなければならないことに注意してください。
%
%   Y=PULSTRAN(T,D,@func) は、文字列の関数名の代わりに関数ハンドルを指定
%   するために、PULSTRAN(T,D,'func') の代わりに使用する場合があります。
%
%   オプションのゲインファクタは、D の列 1 で定義されたオフセットと列 2 の
%   ゲインに関連する 2 列の行列として D を指定することで各々の遅れに適用
%   できます。行ベクトルは、遅れを設定するものとしてのみ解釈されることに
%   注意してください。
%
%   PULSTRAN(T,D,'func',P1,P2,...) は、必要に応じて追加パラメータを 
%   'func' に渡すことができます。たとえば、func( T-D(1), P1, P2, ... ) 
%   のように設定します。
%
%   サンプル化されたプロトタイプパルス
%   PULSTRAN(T,D,P,FS) は、レート FS でサンプル化したベクトル P に、設定した
%   プロトタイプパルスに各々の遅れを適用し、それをすべて加算することで、
%   パルス列を生成します。T と D は、先の定義に従います。ここで、P は、
%   [0,(length(P)-1)/Fs] の時間範囲で、この範囲外ではサンプルは完全に 
%   0 とします。デフォルトでは、線形補間を使って遅れを生成します。
%
%   PULSTRAN(T,D,P) は、Fs = 1 と仮定し、PULSTRAN(..., 'method') は、別の
%   補間法を設定します。利用可能な方法については、interp1 を参照してください。
%
%   例
%   例 1: 3 Hz の反復周波数と 0.1 秒のノコギリ幅をもつ非対称ノコギリ波を
%   生成します。そして、1 秒の信号の長さと 1 kHz のサンプリングレートを
%   考えます。
%
%              T = 0 : 1/1E3 : 1;  % 1 秒間に 1 kHz サンプルの周波数
%              D = 0 : 1/3 : 1;    % 3 Hz の反復周波数
%              Y = pulstran(T,D,'tripuls',0.1,-1); plot(T,Y)
%
%   例 2: 10 kHz で 50% の帯域幅をもつ周期性ガウスパルスを生成します。
%   周波数は 1 kHz、サンプリング周波数は 50 kHz、またパルス列の長さは 
%   10 ミリパルスの反復秒です。反復による振幅を毎回 0.8 ずつ減衰させます。
%   生成関数を参照するために関数ハンドルを用います。
%
%               T = 0 : 1/50E3 : 10E-3;
%               D = [0 : 1/1E3 : 10E-3 ; 0.8.^(0:10)]';
%               Y = pulstran(T,D,@gauspuls,10E3,.5); plot(T,Y)
%
%   例 3: 10 個の レイリーパルス列を生成します:
%         (Statistics Toolbox が必要)
%
%               P = raylpdf((0:31)/5,1.5);  % ALT: P=hamming(32)
%               T = 0:320;
%               D = (0:9)'*32;
%               Y = pulstran(T,D,P); plot(T,Y)
%
%   参考 GAUSPULS, RECTPULS, TRIPULS, SINC.


%   Copyright 1988-2007 The MathWorks, Inc.
