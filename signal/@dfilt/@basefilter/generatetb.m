function generatetb(filterobj, varargin)
%GENERATETB Generate an HDL Test Bench.
%
%   GENERATETB(Hb, TBTYPE) automatically generates VHDL code or
%   Verilog code that functionally verifies the filter generated by
%   GENERATEHDL(Hb) using any or all of impulse, step, ramp, chirp, or
%   noise waveforms as input stimulus  for the filter.  TBTYPE is one of
%   'VHDL' or 'Verilog' or a cell array containing any or all of these.
%   The default file name is 'filter_tb', with a default extension of
%   '.vhd' or '.v' depending on which testbench types are selected. The
%   file is written to the target directory, under the current MATLAB 
%   directory, which defaults to 'hdlsrc'.  This directory is created
%   if it does not exist.
%
%   GENERATETB(Hb, TBTYPE, PARAMETER1, VALUE1, PARAMETER2, VALUE2, ...) 
%   generates the test bench with parameter/value pairs. Valid 
%   properties and values for GENERATETB are listed in the HDL Filter 
%   Designer documentation section "Property Reference."
%
%   GENERATETB(Hb, PARAMETER1, VALUE1, PARAMETER2, VALUE2, ...) 
%   generates the test bench with the TBTYPE as determined by the previous
%   GENERATEHDL(Hb) step. The TBTYPE defaults to that as specified during
%   the GENERATEHDL(Hb) step.
%
%   EXAMPLES:
%   h = firceqrip(30,0.4,[0.05 0.03]);
%   Hb = dfilt.dffir(h);
%   generatehdl(Hb);
%   generatetb(Hb,'VHDL','TestBenchName','MyTestBench');
%   generatetb(Hb,{'Verilog','VHDL'}, 'TestBenchStimulus',{'impulse','chirp'});
%   generatetb(Hb,'VHDL','TestBenchUserStimulus', sin(2*pi*[0:0.01:1]));
%
%   % Testbench Example without explicit TBTYPE specification
%   generatehdl(Hb); % Default target language is VHDL
%   generatetb(Hb);  % TBTYPE is set to VHDL as per previous step.
%   generatehdl(Hb, 'TargetLanguage', 'Verilog');
%   generatetb(Hb);  % TBTYPE is set to Verilog as per previous step.
%
%   See also GENERATEHDL, GENERATETBSTIMULUS, ISHDLABLE.

%   Copyright 2003-2012 The MathWorks, Inc.

  % check for Filter Design HDL Coder
  fdhdlcInstallCheck;

  [cando, ~, errObj] = ishdlable(filterobj);
  if ~cando
    error(errObj);
  end
  
  warning(message('signal:dfilt:basefilter:generatetb:generatetbDeprecated'));
  
  % Add testbench name to varargin 
  if ~any(strcmpi(varargin,'testbenchname'))
    varargin(end+1) = {'testbenchname'};
    varargin(end+1) = {[inputname(1) '_tb']}; 
  end

  % Parse parameters
  hprop = PersistentHDLPropSet; % Get persistent HDLPropSet
  if isempty(hprop),
      error(message('signal:dfilt:basefilter:generatetb:HDLCodeNotGenerated'));
  end
  
  if rem(length(varargin),2) ~= 0
      tbtype = varargin(1);
      tbtype = tbtype{:};
      pvpairs = varargin(2:end);
      % check if pvpairs has targetlanguage again then remove it from
      % pvpairs (ignore it) before updating CLI/INI
      props = pvpairs(1:2:end);
      for n = 1:length(props)
          if ~isempty(strmatch(lower(props(n)),'targetlanguage')),
              pvpairs(2*n)=[];
              pvpairs(2*n-1)=[];
          end
      end
      set(hprop.CLI,pvpairs{:});
      updateINI(hprop);
  else
      % tbtype not specified explicitly -> use the one set in the 
      pvpairs = varargin;
      %sets the param repository in the CLI/INI as per user's specified
      %pvvalues
      set(hprop.CLI,pvpairs{:});
      updateINI(hprop);
      tbtype = {hdlgetparameter('target_language')};
  end

  privgeneratetb(filterobj, tbtype, pvpairs{:});

% [EOF]

